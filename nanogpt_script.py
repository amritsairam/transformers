import torch
import torch.nn as nn
from torch.nn import functional as F

batch_size=32
block_size=8
max_iters=3000
eval_interval=300
learning_rate=1e-2
eval_iters=200
n_embd=32

torch.manual_seed(1337)

with open ('/Users/sairam/Downloads/ng-video-lecture-master/input.txt','r',) as f:
    text=f.read()

chars=sorted(list(set(text)))
vocab_size=len(chars)

stoi={ch:i for i , ch in enumerate(chars)}
itos={i:ch for i , ch in enumerate(chars)}
encode=lambda s: [stoi[c] for c in s ]#this is a function which applies the stoi dictionary mapping to the input string
decode=lambda l: "".join([itos[i] for i in l])

data=torch.tensor(encode(text),dtype=torch.long)#text is our dataset and data is containing encoding values of the text
n=int(0.9*len(data))
train_data=data[:n]
validation_data=data[n:]


def get_batch(split):
    # generate a small batch of data of inputs x and targets y
    data = train_data if split == 'train' else validation_data
    ix = torch.randint(len(data) - block_size, (batch_size,)) #the random integers generated by this line of code will be in the range [0, 1,115,386)
    x = torch.stack([data[i:i+block_size] for i in ix])
    y = torch.stack([data[i+1:i+block_size+1] for i in ix])#both of these will extract 8 numbers after that like we did above in the data and stack it making both a [4,8] tensor 
    # x, y = x.to(device), y.to(device)
    return x, y

@torch.no_grad()
def estimate_loss():
    out={}
    model.eval()
    for split in ['train','val']:
        losses=torch.zeros(eval_iters)
        for k in range(eval_iters):
            X,Y=get_batch(split)
            logits,loss=model(X,Y)
            losses[k]=loss.item()
        out[split]=losses.mean()
    model.train()
    return out

class Head(nn.Module):
    '''one head of self-attention'''
    def __init__(self,head_size):
        super().__init__()
        self.key=nn.Linear(C,head_size,bias=False)
        self.query=nn.Linear(C,head_size,bias=False)
        self.value=nn.Linear(C,head_size,bias=False)
        self.register_buffer('tril',torch.tril(torch.ones(block_size,block_size)))#used for creating lower triangular matrix

    #the main difference between encoder and decoder block is that in encoder block the future nodes are allowed to communicate with the past and the present
    #as our model is learning , but in decoder block we only allow the past tokens to commnunicate with the present as here we have to predict the future block
    
    def forward(self,x):
        B,T,C=x.shape
        k=self.key(x)#(B,T,C)
        q=self.query(x)#(B,T,C)
        #compute attention scores ('affinities')
        wei=q@k.transpose(-2,-1) *C**-0.5
        wei=wei.masked_fill(self.tril[:T,:T]==0,float('-inf'))#(B,T,T)
        wei=F.softmax(wei,dim=-1)#(B,T,T)
        #perform weighted aggregation of values
        v=self.value(x)#(B,T,C)
        out=wei@v#(B,T,T)@(B,T,C)->(B,T,C)
        return out 
    
class MultiHeadAttention(nn.Module):
    def __init__(self,num_heads,head_size):
        super().__init__()
        self.heads=nn.ModuleList([Head(head_size) for _ in range(num_heads)])
        self.proj=nn.Linear(n_embd,n_embd)
    def forward(self,x):
        out=torch.cat([h(x) for h in self.heads],dim=-1)
        out=self.proj(out)
        return out #we are concatenating values in the last dimension which is channel dimension


class FeedForward(nn.Module):
    '''simple linear layer followed by non linearity '''
    def __init__(self,n_embd):
        super().__init__()
        self.net=nn.Sequential(nn.Linear(n_embd,4*n_embd),nn.ReLU,nn.Linear(4*n_embd,n_embd))#multiplying by 4 because given in paper
    def forward(self,x):
        return self.net(x)
    

class Block(nn.Module):
    '''transformer block: communication followed by computation'''
    def __init__(self, n_embd, n_head) -> None:
        super().__init__()
        head_size=n_embd//n_head
        self.sa=MultiHeadAttention(n_head,head_size)
        self.ffwd=FeedForward(n_embd)
        self.ln1=nn.LayerNorm(n_embd)
        self.ln2=nn.LayerNorm(n_embd)
    
    def forward(self,x):
        x=x+self.sa(self.ln1(x))
        x=x+self.ffwd(self.ln2(x))
        return x


class BigramModel(nn.Module):
    def __init__(self) -> None:
        super().__init__()
        self.token_embedding_table=nn.Embedding(vocab_size,n_embd)#(65,32)
        self.positional_encoding_table=nn.Embedding(block_size,n_embd)#(8,32) 
        self.blocks=nn.Sequential(Block(n_embd,n_head=4),Block(n_embd,n_head=4),Block(n_embd,n_head=4),nn.LayerNorm(n_embd))
        self.sa_head=Head(n_embd)
        self.ffwd=FeedForward(n_embd)
        self.lm_head=nn.Linear(n_embd,vocab_size)#(32,65)

    def forward(self,idx,targets=None):# idx is a 4*8 matrix of training data samples randomly
        B,T=idx.shape
        tok_emb=self.token_embedding_table(idx)# this would be 4*8*32 because each value in time will have 32 embd
        pos_emb=self.positional_encoding_table(torch.arange(T))
        x=tok_emb+pos_emb#(B,T,C)
        x=self.sa_head(x)
        x=self.ffwd# after applying self attention node need something so that they can compute the data gathered through , that happens here
        logits=self.lm_head(x)#this will be 4*8*65 because each char will be having 65 prediction of the next chars

        if targets is None:# we are doing this just in case we want to extract logits as the function was earlier demanding targets , which means we will generate loss
            loss=None

        else:
            B,T,C=logits.shape
            logits=logits.view(B*T,C)#this will convert the 3d vector to 2d because when we use pytorch crossentropy it expects the input to be in the form minibatch*C
            targets=targets.view(B*T)# so it will be 32*65 and targets will be 32*1, what this signifies is we are having 65 predictions to come after 32 tokens and in cross_entropy we are checkng how right we were 
            loss=F.cross_entropy(logits,targets)#comparing to targets 

        return logits,loss
    

    def generate(self, idx, max_new_tokens):
        # idx is (B, T) array of indices in the current context
        for _ in range(max_new_tokens):
            idx_cond=idx[:,-block_size:]
            # get the predictions
            logits, loss = self(idx)
            # focus only on the last time step
            logits = logits[:, -1, :] # becomes (B, C), here we are plucking just the last character in idx, and taking its probabilities , giving it to probs and predicting next token
            # apply softmax to get probabilities
            probs = F.softmax(logits, dim=-1) # (B, C)
            # sample from the distribution
            idx_next = torch.multinomial(probs, num_samples=1) # (B, 1)
            # append sampled index to the running sequence
            idx = torch.cat((idx, idx_next), dim=1) # (B, T+1)
            if _ == max_new_tokens-1:
                print(logits.shape)
                print(sum(probs))
                print(idx_next)
        return idx
    
m=BigramModel()
logits,loss=m(xb)

optimizer=torch.optim.Adam(m.parameters(),lr=1e-3)

for iter in range(max_iters):
    if iter%eval_interval==0:
        losses=estimate_loss()
        print(f"step {iter}: train loss {losses['train']:.4f},val loss {losses['val']:.4f} ")

        xb,yb=get_batch('train')

        logits,loss=m(xb,yb)
        optimizer.zero_grad(set_to_none=True)
        loss.backward()
        optimizer.step()

context=torch.zeros((1,1),dtype=torch.long)
print(decode(m.generate(idx = torch.zeros((1, 1), dtype=torch.long), max_new_tokens=100)[0].tolist()))
